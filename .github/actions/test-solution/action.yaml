name: Solution -> Test
description: Tests the solution

outputs:
  node-version:
    description: The Node.js version the solution uses
    value: ${{ steps.node-version.outputs.value }}

runs:
  using: composite
  steps:
    # https://nextjs.org/docs/pages/building-your-application/deploying/ci-build-caching#github-actions
    - name: Next.js Cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          ${{ github.workspace }}/.next/cache
        # Generate a new cache whenever packages or source files change.
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.mjs', '**/*.ts', '**/*.tsx', '**/*.mts') }}
        # If source files changed but packages didn't, rebuild from a prior cache.
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

    - name: Install Node.js
      id: install-node
      uses: actions/setup-node@v4
      with:
        node-version-file: .nvmrc
        cache: npm

    - name: Install Dependencies
      shell: bash
      run: npm ci

    - name: Run build
      shell: bash
      run: npm run build

    - name: Run Tests
      shell: bash
      run: npm run test

    - name: Check Styles
      shell: bash
      run: npm run lint

    - name: Set Node version variable
      id: node-version
      shell: bash
      # The setup-node action returns the node version with a 'v' prefix like 'v1.0.0', #v is used to strip it
      run: |
        NODE_VERSION=${{ steps.install-node.outputs.node-version }}
        echo "value=${NODE_VERSION#v}" >> $GITHUB_OUTPUT
